alerter_db:
  auth:
    database: microservice1db
    username: postgres
    password: postgrespass
  service:
    name: alerter_db-service
    type: ClusterIP
    port: 5432

backend_db:
  auth:
    database: microservice2db
    username: postgres
    password: postgrespass
  primary:
    service:
      name: backend_db-service
      type: ClusterIP
      port: 5432

auth_db:
  auth:
    database: tokens
    username: postgres
    password: postgrespass
  primary:
    service:
      name: auth_db-service
      type: ClusterIP
      port: 5432

# redis-instances:
backend_redis:
  architecture: standalone
  service:
    type: ClusterIP
    port: 6379
    name: backend_redis-service
  auth:
    enabled: false
      
auth_redis:
  architecture: standalone
  service:
    type: ClusterIP
    port: 6379
    name: auth_redis-service
  auth:
    enabled: false

rabbitmq:
  auth:
    username: user1
    password: password1
  extraPlugins: |
    [rabbitmq_management].
  service:
    type: ClusterIP
    port: 5672
    name: rabbitmq-service
#  extraConfiguration: |
## Добавление конфигурации для создания очереди при запуске
#    {rabbit, [
#      {loopback_users, []},  # Позволяет использовать веб-интерфейс
#      {default_user, <<"user1">>},
#      {default_pass, <<"password1">>},
#      {default_vhost, <<"/">>},
#      {default_permissions, [<<"">>, <<">>]}.
#      {default_queue, <<"telegram_queue">>}
#    ]}.

auth_secrets:
  secret_key: "your_secret_key"
  algorithm: "HS256"


apps_settings:
  auth:
    host: "web-store-auth"
    port: "11000"
    access_token_expire_minutes: "60"
  crypto:
    host: "web-store-crypto"
    port: "5000"
  backend:
    time_interval: "10"
    port: 8000

s3_data:
  host: "your-host"
  port: "443"
  access_key: "your-access-key"
  secret_key: "your-secret-key"
  bucket_name: "items"

telegram_bot_token: "your-bot-token"